# if [ /usr/local/bin/kubectl ]; then source <(kubectl completion zsh); fi
# export KUBECONFIG=/home/ffettes/.bluemix/plugins/container-service/clusters/bmmrootd03m17d43d4v0/kube-config-hou02-asterisk_server.yml

# # The next line updates PATH for the Google Cloud SDK.
# if [ -f '/usr/bin/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/bin/google-cloud-sdk/path.zsh.inc'; fi

# # The next line enables shell command completion for gcloud.
# if [ -f '/usr/bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/bin/google-cloud-sdk/completion.zsh.inc'; fi
# PYPI_LOCAL=http://localhost:3141/root/pypi/+simple/

# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# nvm use v10

# source <(microk8s.kubectl completion zsh)
# alias ku=microk8s.kubectl
# alias m8=microk8s

# export KUBECONFIG=/home/ffettes/.bluemix/plugins/container-service/clusters/bmmrootd03m17d43d4v0/kube-config-hou02-asterisk_server.yml

# # The next line updates PATH for the Google Cloud SDK.
# if [ -f '/usr/bin/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/bin/google-cloud-sdk/path.zsh.inc'; fi

# # The next line enables shell command completion for gcloud.
# if [ -f '/usr/bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/bin/google-cloud-sdk/completion.zsh.inc'; fi
# PYPI_LOCAL=http://localhost:3141/root/pypi/+simple/

# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# nvm use v10

export GOOGLE_APPLICATION_CREDENTIALS="/home/ffettes/ondewo/ondewo-s2t-cloud/etc/google/test-558c418a9aac.json"
export IBM_KEY="lZmanejSGJFnCNXP4Ca-8bHBFqssfucfvjJHH8VScBvo"
export IBM_URL="https://stream-fra.watsonplatform.net/speech-to-text/api"

alias onlyduckling="cd ~/ondewo/ondewo-cai && make start-duckling-locally"
alias envoy="docker kill envoy || true && docker run --rm -d --name envoy -v /home/ffettes/ondewo/ondewo-aim/envoy.yml:/etc/envoy/envoy.yaml --network=host envoyproxy/envoy:v1.10.0"
alias aimp_bridge="envoy && onlyduckling"
alias postgres="docker pull dockerregistry.ondewo.com:5000/postgres:latest; docker rm -f postgres; docker run --restart always --name postgres -d -p 5432:5432 -e POSTGRES_USER=cai -e POSTGRES_PASSWORD=asdf dockerregistry.ondewo.com:5000/postgres:latest postgres -c log_statement=all"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/ffettes/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/ffettes/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/ffettes/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/ffettes/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

alias make_speech_services="make --directory=~/ondewo/ondewo-s2t-cloud run_stream_local && make --directory=~/ondewo/ondewo-s2t-demultiplexer run_demux_local && make --directory=~/ondewo/ondewo-t2s-cloud run_batch_local"
