snippet im "import" b
import $1
endsnippet

snippet ima "import as" b
import $1 as $2
endsnippet

snippet ilif "In-line if" b
$1 = $2 if $3 else $4
endsnippet

snippet ilif2 "In-line if advanced" b
$1 = $2 if $3 is not None else $4
endsnippet

snippet ilfo "In-line for" b
$1 = [$2 for i in $3]
endsnippet

snippet ilfot "In-line for tuple" b
$1 = ($2 for i in $3)
endsnippet

snippet loim "Logging import" b
import logging

LOGGING_LEVEL = logging.${1:INFO}
LOGGING_FORMAT = "${2:%(asctime)-15s}:${3:%(levelname)-4s}--${4:%(message)s}"

logging.basicConfig(level=LOGGING_LEVEL, format=LOGGING_FORMAT)

endsnippet

snippet lodf "Logging Debug fstring" b
logging.debug(f"$1{$2}$3")
endsnippet

snippet lod "Logging Debug" b
logging.debug("$1")
endsnippet

snippet loif "Logging Info fstring" b
logging.info(f"$1{$2}$3")
endsnippet

snippet loi "Logging Info" b
logging.info("$1")
endsnippet

snippet lowf "Logging Warning fstring" b
logging.debug(f"$1{$2}$3")
endsnippet

snippet low "Logging Warning" b
logging.debug("$1")
endsnippet

snippet pytst "Test-In-Class" b
@staticmethod
def test_$1($2):
$3
endsnippet
